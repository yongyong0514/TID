class Solution {
    public int solution(int n, int[] lost, int[] reserve) {
        
        //전체 학생수 만큼 INT배열 people을 생성합니다.
        int[] people = new int[n];
        
        int answer = n;
        
        //체육복을 잃어버린 학생들의 배열 값에 -1 을 입력하고 구분합니다
        for(int i: lost)
            people[i - 1]--;
        
        //여분의 체육복을 가진 학생들의 배열 값을 +1 을 입력하고 구분합니다.
        for(int i: reserve)
            people[i - 1]++;
        
        for(int i = 0; i < people.length; i++) {
        
            //people의 i번째 배열의 값이 -1 인 체육복을 잃어버린 학생을 기준으로 앞, 뒤 번호로 빌릴 수 있는 조건에 따라 i - 1 < i < i + 1 을 기준으로 조건을 체크합니다. 
            if(people[i] == -1) {
                
                //현재 i 값의 사이값인 앞 i - 1 를 AND 조건으로 학생 숫자 범위인 정수인지 체크한 뒤, 
                //people[i - 1] 즉, 이전 배열의 값이 1인 경우 체육복의 여분을 가진 학생입니다.
                if(i - 1 >= 0 && people[i -1] == 1)  {
                    
                    //따라서, 현재 i의 체육복을 가지고 있지 않은 학생의 배열 값을 +1 증가시켜 체육복이 있는 학생으로,
                    //이전 배열 people[i -1]의 값을 -1 처리해서 여유분은 없지만 체육복이 있는 학생으로 처리합니다.
                    people[i]++;
                    people[i - 1]--;
                
                //앞 배열 값이 해당되지 않는 경우, else if 조건에 따라
                //현재 i의 사이 값인 뒤 i + 1 은 전체 학생의 수를 넘지 않도록 AND조건으로 체크합니다.
                //뒤 배열 people[i + 1]의 값이 여유분을 가진 학생인지 체크합니다.
                } else if(i + 1 < people.length && people[i + 1] == 1) {
                    
                    //현재 체육복을 가지고 있찌 않은 학생의 배열 값을 +1해서 체육복이 있는 학생으로,
                    //뒤 배열 people[i + 1]의 값을 -1 처리해서 여유는 없지만 체육복이 있는 학생으로 처리합니다.
                    people[i]++;
                    people[i + 1]--;
                
                //위의 두 조건에 해당되지 않는다면 i의 사이 값인 i - 1, i + 1 즉, 앞 뒤 학생이 여유가 없으므로
                //위 조건에 따라 빌릴 수 없다면 수업에 참여하는 학생의 숫자를 -1 감소시킵니다.
                } else {
                    answer--;
                }
            }
        }
            return answer;

    }
}
