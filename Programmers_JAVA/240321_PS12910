import java.util.*;

class Solution {
    public int[] solution(int[] arr, int divisor) {
        
        //정렬할 배열을 생성합니다
        ArrayList<Integer> list = new ArrayList<Integer>();
        
        //배열의 길이만큼 반복하면서
        for(int i = 0; i < arr.length; i++) {
        
            //divisor로 나우고 나머지가 0인 경우, 나누어 떨어지는 숫자이므로 
            if(arr[i] % divisor == 0) {
                
                //리스트에 추가합니다.
                list.add(arr[i]);
            }
        }
        
        //isEmpty()는 List의 null을 체크할 수 있습니다.
        //(list == null)과 다른 점은 null은 내부 원소를 비교할 때 사용합니다.
        //list.isEmpty()로 list가 비어있는 경우, 즉 나누어 떨어지는 숫자가 없다면
        if(list.isEmpty()) {

            //조건에 따라 -1을 출력하기 위해 list에 삽입합니다.
            list.add(-1);   
        }
        
        //size()는 배열 list의 원소의 개수를 리턴합니다.
        //여기서 원소의 개수만큼 answer배열을 생성하면
        int [] answer = new int[list.size()];  
            
        //0부터, -1개까지 반복하는 for문에 따라 
        for(int i = 0; i < answer.length; i++) {
                
            //answer에 list의 원소를 담게 됩니다.
            answer[i] = list.get(i);   
        }
        
        //오름차순 정렬합니다.
        Arrays.sort(answer);
        
        return answer;
    }
}
