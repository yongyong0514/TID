import java.util.Arrays;

class Solution {
    public int[] solution(int[] array, int[][] commands) {
        
        //크기가 2차원 배열의 길이만큼의 결과를 담을 answer배열을 생성합니다. 
        int[] answer = new int[commands.length];
        

        for(int i = 0; i < commands.length; i++) {

            //copyOf(언본 배열, 복사할 길이)
            //copyOfRange(원본 배열, 시작 인덱스, 끝 인덱스) 원본 배열의 내용을 범위만큼 복사합니다.
            
            //INT 배열temp에는 array 배열에서 시작 인덱스와 끝 인덱스 만큼의 배열을 복사합니다
            //commands는 [i, j, k]를 원소로 가진 2차원 배열입니다.
            //시작 인덱스 i, 끝 인덱스 j는 다음과 같습니다.
            
            //시작 인덱스 i는 commands[i][0]로 commands 각 행의 첫번째 값을 두고
            //배열이 0 부터 순서를 갖기 때문에 시작 인덱스의 범위를 우선 -1 처리합니다.
            //끝 인덱스 j는 commands[i][1]로 commands 각 행의 두번째 값을 둡니다.
            int [] temp = Arrays.copyOfRange(array, commands[i][0] - 1, commands[i][1]);
            
            //Arrays.sort를 이용해서 오름차순/내림차순 정렬할 수 있습니다.
            //Arrays.sort(배열) 오름차순
            //Arrays.sort(배열, Collections.reverseOrder()) 내림차순
            //Collection class의 reverserOrder()함수를 사용합니다.
            
            //Arrays.sort로 오름차순 정렬합니다.
            Arrays.sort(temp);
            
            //결과를 담을 answer의 i 번째 배열에는 temp 배열의 commands[i][2] 
            //즉, 마지막 commands 배열의 행 원소인 k를 
            //배열이 0분터 순서를 갖음에 따라 -1 처리해서 삽입합니다.
            answer[i] = temp[commands[i][2] - 1];
            
        } 
        
        return answer;
    }
}
