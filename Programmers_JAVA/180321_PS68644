import java.util.HashSet;
import java.util.Arrays;

class Solution {
    
    public int[] solution(int[] num) {
        
        //HashSet을 사용해서 두 수의 합의 중복을 처리할 수 있습니다.
        //set에 중복 값이 저장되지 않습니다.
        HashSet<Integer> set = new HashSet<>();
        
        //i는 입력받은 숫자의 길이만큼 반복합니다.
        for(int i = 0; i < num.length; i++) {
            
            //j는 입력받은 숫자의 길이만큼 i + 1 부터 반복합니다.
        	for(int j = i + 1; j < num.length; j++) {
        		
                //set에는 입력받은 num배열의 i번째 값과 i + 1된 num 배열의 순서 값이 저장됩니다.
                //set에는 중복 값이 저장되지 않기 때문에 i + j의 값이 중복되는 경우 한번만 저장됩니다.
                set.add(num[i] + num[j]);
            }
        }
        
        //set에 저장된 배열 값을 이제 정렬해서 출력해야 합니다.
        //여기서 람다식을 먼저 알아야 하는데 람다식은 메서드를 하나의 식으로 표현한 것을 뜻합니다.
        //스트림은 자주 사용되는 데이터 조작 메서드를 정의해놓았습니다.
        //스트림을 이용하면 배열이나 컬렉션, 파일에 저장된 데이터로 같은 방식으로 처리할 수 있습니다.
        //함께 사용한 mapToInt()는 해당 타입의 스트림으로 바꿔줍니다.
        //여기서는 위와 함께 int 배열 result에 set을 .toArray()로 배열화해서 저장하게 됩니다.
        int[] result = set.stream().mapToInt(i -> i).toArray();
        
        //Arrays.sort()로 정렬합니다. 기본값은 오름차순 입니다.
        //내림차순은 reverseOrder()함수를 함꼐 사용하면 됩니다.      
        Arrays.sort(result);
        
        return result;
    }
}
