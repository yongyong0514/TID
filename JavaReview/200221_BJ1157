import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;

public class Main {
	public static void main(String args[]) throws IOException {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        String str = br.readLine();
        
        str = str.toUpperCase();
        
        int [] arr = new int[26];
        
        int max = 0;
        
        int most = 0;
        
        for(int i = 0; i < str.length(); i++) {
        
        	int n = str.charAt(i);
            
            arr[n - 65]++;
        }
        
        for(int i = 0; i < arr.length; i++) {
        
        	if(max < arr[i]) {
            
            	max = arr[i];
                
                most = i + 65;
            
            } else if(max == arr[i]) {
            	
                most = '?';
                
            }
        }
        
        System.out.println((char)most);
        
    }
}

이 문제는 입력받는 문자의 알파벳이 대문자, 소문자 관계없이 가장 많이 사용된 문자를 출력하는 문제입니다.

str로 문장을 입력받고, 입력받은 문자를 toUpperCase를 사용해서 대문자화한 뒤 다시 str에 저장합니다.

INT 배열을 알파벳의 개수 26개로 배열을 만들고 가장 많이 나온 알파벳의 개수를 저장할 max와 가장 많이 나온 알파벳을 저장할 most를 생성합니다.

첫 번째 반복문은 입력받은 str의 길이만큼 반복하면서 INT형 n에 charAt()으로 입력한 문자 순서대로 한문자씩 숫자로 변환해서 넣습니다.

첫 번째 반복문 내부에서 입력된 문자 n을 아스키코드 A의 값 65를 이용해서 문자를 판별합니다.


두 번째 반복문은 INT 배열의 길이만큼 반복하고 배열 내부에서는 if else를 반복 사용해서 가장 많이 나온 알파뱃을 max로 지정하고 가장 많은 알파벳의 수가 있는 arr배열의 i 값에 + 65 아스키 값을 구해서 most에 저장합니다.

마지막으로 반복이 끝나면 CHAR형으로 most를 변환해서 출력합니다.
